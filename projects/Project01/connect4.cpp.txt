#include <iostream>
#include "connect4.h"

const int ROWS = 6;
const int COLS = 7;
Player board[ROWS][COLS]; // 2D array representing the game board

// Initialize the game board to be empty
void makeBoard() {
    for (int row = 0; row < ROWS; row++) {
        for (int col = 0; col < COLS; col++) {
            board[row][col] = Player::NONE;
        }
    }
}

// Print the game board to the console
void printBoard() {
    for (int row = 0; row < ROWS; row++) {
        for (int col = 0; col < COLS; col++) {
            char display = '.';
            if (board[row][col] == Player::PLAYER_1) display = 'X';
            if (board[row][col] == Player::PLAYER_2) display = 'O';
            std::cout << display << " ";
        }
        std::cout << std::endl;
    }
}

// Check if the column is full
bool isColumnFull(int col) {
    return board[0][col] != Player::NONE;
}

// Drop a piece into a column
bool dropPiece(int col, Player currentPlayer) {
    if (isColumnFull(col)) return false;

    for (int row = ROWS - 1; row >= 0; row--) {
        if (board[row][col] == Player::NONE) {
            board[row][col] = currentPlayer;
            return true;
        }
    }
    return false;
}

// Check if there's a winner or a draw
GameState gameStatus() {
    // Check for a win (Horizontal, Vertical, Diagonal)
    for (int row = 0; row < ROWS; row++) {
        for (int col = 0; col < COLS; col++) {
            Player current = board[row][col];
            if (current == Player::NONE) continue;

            // Horizontal
            if (col + 3 < COLS &&
                current == board[row][col+1] &&
                current == board[row][col+2] &&
                current == board[row][col+3]) {
                return (current == Player::PLAYER_1) ? GameState::PLAYER_1_WINS : GameState::PLAYER_2_WINS;
            }

            // Vertical
            if (row + 3 < ROWS &&
                current == board[row+1][col] &&
                current == board[row+2][col] &&
                current == board[row+3][col]) {
                return (current == Player::PLAYER_1) ? GameState::PLAYER_1_WINS : GameState::PLAYER_2_WINS;
            }

            // Diagonal (down-right)
            if (row + 3 < ROWS && col + 3 < COLS &&
                current == board[row+1][col+1] &&
                current == board[row+2][col+2] &&
                current == board[row+3][col+3]) {
                return (current == Player::PLAYER_1) ? GameState::PLAYER_1_WINS : GameState::PLAYER_2_WINS;
            }

            // Diagonal (up-right)
            if (row - 3 >= 0 && col + 3 < COLS &&
                current == board[row-1][col+1] &&
                current == board[row-2][col+2] &&
                current == board[row-3][col+3]) {
                return (current == Player::PLAYER_1) ? GameState::PLAYER_1_WINS : GameState::PLAYER_2_WINS;
            }
        }
    }

    // Check for draw
    bool isDraw = true;
    for (int col = 0; col < COLS; col++) {
        if (board[0][col] == Player::NONE) {
            isDraw = false;
            break;
        }
    }

    return isDraw ? GameState::DRAW : GameState::ONGOING;
}

// Main gameplay loop
void play() {
    makeBoard();
    Player currentPlayer = Player::PLAYER_1;
    int column;
    GameState state;

    printRules();
    printBoard();

    while ((state = gameStatus()) == GameState::ONGOING) {
        std::cout << "Player " << (currentPlayer == Player::PLAYER_1 ? "1 (X)" : "2 (O)") << ", choose a column (0-6): ";
        std::cin >> column;

        // Validate input
        if (column < 0 || column >= COLS || !dropPiece(column, currentPlayer)) {
            std::cout << "Invalid move. Try again.\n";
            continue;
        }

        printBoard();
        currentPlayer = (currentPlayer == Player::PLAYER_1) ? Player::PLAYER_2 : Player::PLAYER_1;
    }

    // Game results
    if (state == GameState::PLAYER_1_WINS) {
        std::cout << "Player 1 (X) wins!\n";
    } else if (state == GameState::PLAYER_2_WINS) {
        std::cout << "Player 2 (O) wins!\n";
    } else {
        std::cout << "It's a draw!\n";
    }
}

// Print the game rules
void printRules() {
    std::cout << "Welcome to Connect Four!\n";
    std::cout << "Players take turns dropping a piece into one of the 7 columns.\n";
    std::cout << "The first player to connect four pieces in a row (horizontally, vertically, or diagonally) wins.\n";
    std::cout << "To play, enter a column number between 0 and 6 when prompted.\n";
    std::cout << "Good luck!\n\n";
}
